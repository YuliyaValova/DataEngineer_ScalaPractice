package load
import connection.DB2Connector
import generator.RecordsGenerator

case object LoadStarter{


  var conf = new Array[String](5)

  /**
   * Entry point of the program. This app creates a table in DB2 on Cloud with 20k sample records.
   * product_id - autogenerated numeric
   * product_group - autogenerated numeric in 0..9 range
   * year - autogenerated numeric in 2015..2018 range
   * 12 columns with monthly purchases amount - numeric in 0..100000 range
   * There should be no duplicates for  the same product/year
   * If there are multiple product rows for different years, product/group combination should be concise
   */

  def main(args: Array[String]): Unit = {
    checkArgs(args)
    val url = conf(0)
    val username = conf(1)
    val password = conf(2)
    val tableName = conf(3)
    val rowsNumber = conf(4).toInt
    val connection = DB2Connector.getConnectionToDatabase(url, username, password)
    val generator:RecordsGenerator = new RecordsGenerator
    generator.generateTable(connection, tableName, rowsNumber)
    DB2Connector.retrieveConnection(connection)

    //You can use this to select rows count in table and drop it

    //val loader = new DataLoader
    //println(loader.selectAll(connection, tableName))
    //loader.dropTable(connection, tableName)
  }



  def checkArgs(args:Array[String]):Unit = {
    try {
      val argSize = args.size
      argSize match {
        case 5 => conf = args
        case 4 => {
          for(i<-0 until 4)
            conf(i) = args(i)
          conf(4) = "20000"
        }
        case _ => {
          println("Invalid parameters number.")
          System.exit(1)
        }
      }
        conf(4).toInt
    } catch {
      case e:Exception => {
        println("Invalid rowNumber entered.")
        e.printStackTrace()
        System.exit(1)
      }
    }
  }
}
